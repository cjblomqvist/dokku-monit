#!/usr/bin/env bash
set -eo pipefail; [[ $DOKKU_TRACE ]] && set -x
source "$(dirname $0)/../common/functions"

restart_monit () {
  sudo /usr/local/bin/monit reload > /dev/null
}

case "$1" in
  monit:build-control)
    APP="$2"; DOKKU_APP_LISTEN_PORT="$3"; DOKKU_APP_LISTEN_IP="${4}"
    MONITRC_PATH="$DOKKU_ROOT/$APP/monitrc"
    VHOST_PATH="$DOKKU_ROOT/$APP/VHOST"

    if [[ -z "$DOKKU_APP_LISTEN_PORT" ]] && [[ -f "$DOKKU_ROOT/$APP/PORT" ]]; then
      DOKKU_APP_LISTEN_PORT=$(< "$DOKKU_ROOT/$APP/PORT")
    fi
    if [[ -z "$DOKKU_APP_LISTEN_IP" ]] && [[ -f "$DOKKU_ROOT/$APP/IP" ]]; then
      DOKKU_APP_LISTEN_IP=$(< "$DOKKU_ROOT/$APP/IP")
    fi

    [[ -f "$DOKKU_ROOT/ENV" ]] && source $DOKKU_ROOT/ENV
    [[ -f "$DOKKU_ROOT/$APP/ENV" ]] && source $DOKKU_ROOT/$APP/ENV

    NONSSL_VHOSTS=$(head -n 1 $VHOST_PATH)

    xargs -i echo "-----> Setting up monitrc for {}..." <<< "$NONSSL_VHOSTS"

    # Get docker container id for deployed app
    DOCKER_ID=$(docker ps -lq)

    MONIT_APP_TEMPLATE_FILE="/app/monitrc.template"
    MONIT_DEFAULT_TEMPLATE_FILE="$PLUGIN_PATH/monit/templates/monitrc.template"

    # Get contents of default template, non-expanded
    MONIT_DEFAULT_TEMPLATE=$(cat $MONIT_DEFAULT_TEMPLATE_FILE)
    # If an app specific tempate file exists, grab that content, otherwise use MONIT_DEFAULT_TEMPLATE content
    MONIT_TEMPLATE=$(docker exec $DOCKER_ID /bin/bash -c "[[ -f \"/app/monitrc.template\" ]] && cat /app/monitrc.template" || echo "$MONIT_DEFAULT_TEMPLATE")

    #Remove any previous monitrc files
    [[ -f "$MONITRC_PATH" ]] && rm $MONITRC_PATH

    # Expand template and save to monitrc file for app
    eval "echo \"$MONIT_TEMPLATE\" >> $MONITRC_PATH"

    if [[ -n "$DOKKU_APP_LISTEN_PORT" ]] && [[ -n "$DOKKU_APP_LISTEN_IP" ]]; then
      echo "       Reloading monit"
      restart_monit
    fi
    ;;

  help | monit:help)
    cat && cat<<EOF
    monit:build-control <app>                       (Re)builds monitrc for given app
EOF
    ;;

  *)
    exit $DOKKU_NOT_IMPLEMENTED_EXIT
    ;;

esac
